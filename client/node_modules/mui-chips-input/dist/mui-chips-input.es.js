import C from "react";
import J from "@mui/material/Chip";
import { styled as O } from "@mui/material/styles";
import { jsx as m } from "react/jsx-runtime";
import me from "@mui/icons-material/Close";
import xe from "@mui/material/ClickAwayListener";
import ge from "@mui/material/IconButton";
import ye from "@mui/material/TextField";
const $ = {
  enter: "Enter",
  backspace: "Backspace"
}, be = O(J)(({ theme: t, size: n }) => `
    max-width: 100%;
    margin: 2px 4px;
    height: ${n === "small" ? "26px" : "32px"};


    &[aria-disabled="true"] > svg {
      color: ${t.palette.action.disabled};
      cursor: default;
    }

    &.MuiChipsInput-Chip-Editing {
      background-color: ${t.palette.primary.light};
      color: ${t.palette.primary.contrastText};
    }
  `), De = {
  ChipStyled: be
}, q = (t) => {
  const {
    className: n,
    index: l,
    onDelete: r,
    disabled: a,
    onEdit: g,
    isEditing: E,
    disableEdition: u,
    ...y
  } = t, p = (s) => {
    s.key === $.enter && r(l);
  }, A = (s) => {
    s?.preventDefault?.(), s?.stopPropagation?.(), r(l);
  }, b = (s) => {
    s.target.textContent === y.label && (a || g(l));
  };
  return /* @__PURE__ */ m(De.ChipStyled, {
    className: `MuiChipsInput-Chip ${E ? "MuiChipsInput-Chip-Editing" : ""} ${n || ""}`,
    onKeyDown: p,
    disabled: a,
    onDoubleClick: u ? void 0 : b,
    tabIndex: a ? -1 : 0,
    "aria-disabled": a,
    onDelete: A,
    ...y
  });
};
function Ee(t) {
  return typeof t == "boolean";
}
function Ae(t) {
  return typeof t == "object" && !Array.isArray(t) && t !== null;
}
function Ie(t, n) {
  typeof n == "function" ? n(t) : n && Ae(n) && "current" in n && (n.current = t);
}
const we = O("div")`
  top: 50%;
  transform: translateY(-50%);
  right: 10px;
  position: absolute;
`, ke = O(ye)((t) => `
    max-width: 100%;

    .MuiInputBase-root {
      display: flex;
      flex-wrap: wrap;
      align-items: flex-start;
      row-gap: 5px;
      padding-top: ${t.size === "small" ? "5px" : "9px"};
      padding-right: ${t.InputProps?.endAdornment ? "30px" : "9px"};
      padding-bottom: ${t.size === "small" ? "5px" : "9px"};
      padding-left: 10px;

      input {
        min-width: 30px;
        width: auto;
        flex-grow: 1;
        text-overflow: ellipsis;
        padding: ${t.size === "small" ? "3.5px 4px" : "7.5px 4px"};
        align-self: center;
      }
    }
  `), $e = O(J)(({ theme: t, size: n }) => `
    max-width: 100%;
    margin: 2px 4px;
    height: ${n === "small" ? "26px" : "32px"};

    &[aria-disabled="true"] > svg.MuiChip-deleteIcon {
      color: ${t.palette.action.disabled};
      cursor: default;
    }
  `), H = {
  ChipStyled: $e,
  TextFieldStyled: ke,
  EndAdornmentClose: we
}, Q = C.forwardRef((t, n) => {
  const {
    chips: l,
    onAddChip: r,
    onEditChip: a,
    onDeleteChip: g,
    onDeleteAllChips: E,
    InputProps: u,
    onInputChange: y,
    disabled: p,
    clearInputOnBlur: A,
    validate: b,
    error: s,
    helperText: T,
    hideClearAll: I,
    inputProps: P,
    size: B,
    disableDeleteOnBackspace: v,
    disableEdition: V,
    className: M,
    renderChip: S,
    addOnWhichKey: w,
    onFocus: o,
    inputValue: d,
    ...F
  } = t, [X, Z] = C.useState(""), [z, N] = C.useState(""), W = C.useRef(null), K = C.useRef(!1), ee = C.useRef(typeof d == "string"), [x, j] = C.useState(null), {
    onKeyDown: te,
    ...ne
  } = P || {}, {
    inputRef: ve,
    ...le
  } = u || {}, Y = () => {
    N("");
  }, L = ee.current, k = L ? d : X, R = (e) => {
    y?.(e), L || Z(e);
  }, ie = (e) => {
    R(l[e]), j(e), Y();
  }, D = () => {
    j(null);
  }, c = () => {
    Y(), R("");
  }, re = (e) => {
    R(e.target.value);
  }, oe = () => {
    !K.current || (x !== null ? (D(), c()) : A && c(), K.current = !1);
  }, ae = (e) => {
    W.current = e, n && Ie(e, n);
  }, U = (e, i) => (h) => {
    if (typeof b == "function") {
      const f = b(e);
      if (f === !1) {
        i.preventDefault();
        return;
      }
      if (!Ee(f) && f.isError) {
        i.preventDefault(), N(f.textError);
        return;
      }
    }
    h();
  }, se = (e, i, h) => {
    U(e, h)(() => {
      a?.(e, i), D(), c();
    });
  }, de = (e, i) => {
    U(e, i)(() => {
      r?.(k.trim()), c();
    });
  }, pe = (e) => w ? Array.isArray(w) ? w.some((i) => i === e) : w === e : e === $.enter, ue = (e) => {
    const i = pe(e.key), h = e.key === $.backspace, f = k.trim();
    if (i && e.preventDefault(), k.length > 0 && i)
      f.length === 0 ? c() : x !== null ? se(f, x, e) : de(f, e);
    else if (h && k.length === 0 && l.length > 0 && !v) {
      const G = l.length - 1;
      g?.(G), x === G && D();
    }
    te?.(e);
  }, ce = (e) => {
    e.preventDefault(), o?.(e), K.current = !0;
  }, he = (e) => {
    e.preventDefault(), !I && !p && (E?.(), c(), D());
  }, fe = (e) => {
    e === x ? (c(), D()) : ie(e), W.current?.focus();
  }, Ce = (e) => {
    p || (g?.(e), x !== null && (D(), c()));
  }, _ = l.length > 0;
  return /* @__PURE__ */ m(xe, {
    onClickAway: oe,
    children: /* @__PURE__ */ m(H.TextFieldStyled, {
      value: k,
      onChange: re,
      ref: n,
      className: `MuiChipsInput-TextField ${M || ""}`,
      size: B,
      placeholder: "Type and press enter",
      onFocus: ce,
      inputProps: {
        onKeyDown: ue,
        ...ne
      },
      disabled: p,
      error: Boolean(z) || s,
      helperText: z || T,
      InputProps: {
        inputRef: ae,
        startAdornment: _ ? l.map((e, i) => {
          const h = {
            key: `chip-${i}`,
            index: i,
            onEdit: fe,
            label: e,
            title: e,
            isEditing: i === x,
            size: B,
            disabled: p,
            disableEdition: V,
            onDelete: Ce
          };
          return S ? S(q, h) : /* @__PURE__ */ m(q, {
            ...h
          });
        }) : null,
        endAdornment: I ? null : /* @__PURE__ */ m(H.EndAdornmentClose, {
          style: {
            visibility: _ ? "visible" : "hidden"
          },
          children: /* @__PURE__ */ m(ge, {
            "aria-label": "Clear",
            title: "Clear",
            disabled: p,
            size: "small",
            onClick: he,
            children: /* @__PURE__ */ m(me, {
              fontSize: "small"
            })
          })
        }),
        ...le
      },
      ...F
    })
  });
});
Q.defaultProps = {
  onInputChange: () => {
  },
  clearInputOnBlur: !1,
  hideClearAll: !1,
  disableDeleteOnBackspace: !1,
  disableEdition: !1,
  addOnWhichKey: $.enter,
  onDeleteChip: () => {
  },
  onAddChip: () => {
  },
  inputValue: void 0,
  onEditChip: () => {
  },
  renderChip: void 0,
  onDeleteAllChips: () => {
  },
  validate: () => !0
};
function Te(t, n) {
  return [...t, n];
}
function Be(t, n) {
  return t.filter((l, r) => n !== r);
}
function Oe(t, n, l) {
  return t.map((r, a) => n === a ? l : r);
}
const Pe = C.forwardRef((t, n) => {
  const {
    value: l,
    onChange: r,
    onAddChip: a,
    onInputChange: g,
    onDeleteChip: E,
    disabled: u,
    validate: y,
    clearInputOnBlur: p,
    hideClearAll: A,
    disableDeleteOnBackspace: b,
    onEditChip: s,
    renderChip: T,
    disableEdition: I,
    addOnWhichKey: P,
    inputValue: B,
    ...v
  } = t;
  return /* @__PURE__ */ m(Q, {
    chips: l,
    onAddChip: (o) => {
      if (u)
        return;
      const d = Te(l, o), F = d.length - 1;
      a?.(o, F), r?.(d);
    },
    onInputChange: g,
    disableDeleteOnBackspace: b,
    onDeleteChip: (o) => {
      if (u)
        return;
      const d = l[o];
      r?.(Be(l, o)), E?.(d, o);
    },
    onEditChip: (o, d) => {
      u || I || (r?.(Oe(l, d, o)), s?.(o, d));
    },
    renderChip: T,
    onDeleteAllChips: () => {
      r?.([]);
    },
    clearInputOnBlur: p,
    disabled: u,
    disableEdition: I,
    validate: y,
    inputValue: B,
    hideClearAll: A,
    addOnWhichKey: P,
    ...v,
    ref: n
  });
});
Pe.defaultProps = {
  value: [],
  onChange: () => {
  },
  onAddChip: () => {
  },
  onDeleteChip: () => {
  },
  onInputChange: () => {
  },
  onEditChip: () => {
  },
  addOnWhichKey: $.enter,
  clearInputOnBlur: !1,
  disableEdition: !1,
  hideClearAll: !1,
  disableDeleteOnBackspace: !1,
  validate: () => !0
};
export {
  Pe as MuiChipsInput
};
